<%- include('layout/adminheader.ejs') %>   
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>


<main class="h-full pb-16 overflow-y-auto">
  <div class="container px-6 mt-8 mx-auto grid">
    <div class="px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800">
      <!-- General elements -->
      <h4 class="mb-4 text-lg font-semibold text-gray-600 dark:text-gray-300">
        Add Product
      </h4>

      <div class="px-4 align-items-center">
        <div class="card my-4">
          <div class="card-body">
            <form
              action="/admin/addproduct"
              onsubmit="return formValidate() "
              method="post"
              enctype="multipart/form-data"
            >
              <div class="mb-3 row">
                <label for="html5-text-input" class="col-md-2 col-form-label"
                  >Product Name</label
                >
                <div class="col-md-10">
                  <input
                    class="form-control"
                    type="text"
                    id="pnameid"
                    name="productname"
                    onkeyup="nullName()"
                  />
                  <p class="text-danger" id="errorname"></p>

                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-email-input" class="col-md-2 col-form-label"
                  >Category</label
                >
                <div class="col-md-10">
                  <select name="category" id="defaultSelect" class="form-select">
                    <% for (var i=0;i<category.length;i++){ %> 
                    <option value="<%=category[i]._id %>" ><%=category[i].category %></option>
                    <% } %> 
                  </select>
                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-search-input" class="col-md-2 col-form-label"
                  >Price</label
                >
                <div class="col-md-10">
                  <input
                    class="form-control"
                    type="search"
                    id="priceid"
                    name="price"
                    onkeyup="nullPrice()"
                    onkeypress="return onlyNumberKey(event)"

                  />
                  <p class="text-danger" id="erorrprice"></p>

                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-email-input" class="col-md-2 col-form-label"
                  >Size</label
                >
                <div class="col-md-10">
                  <select name="size" id="defaultSelect" class="form-select">
                    <option>size</option>
                    <option value="1">SMALL</option>
                    <option value="2">MEDIUM</option>
                    <option value="3">LARGE</option>
                    <option value="3">E-LARGE</option>
                  </select>
                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-email-input" class="col-md-2 col-form-label"
                  >Offer in %</label
                >
                <div class="col-md-10">
                  <input
                  class="form-control"
                  type="search"
                  id="priceid"
                  name="offer"
                  onkeypress="return onlyNumberKey(event)"

                />
                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-search-input" class="col-md-2 col-form-label"
                  >Quantity</label
                >
                <div class="col-md-10">
                  <input
                    class="form-control"
                    type="search"
                    id="quantityid"
                    name="quantity"
                    onkeyup="nullQuantity()"
                    onkeypress="return onlyNumberKey(event)"
                  />
                  <p class="text-danger" id="errorquantity"></p>

                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-search-input" class="col-md-2 col-form-label"
                  >Description</label
                >
                <div class="col-md-10">
                  <input
                    class="form-control"
                    type="search"
                    id="descriptionid"
                    name="description"
                    onkeyup="nullDescription()"
                  />
                  <p class="text-danger" id="errordescription"></p>

                </div>
              </div>
              <div class="mb-3 row">
                <label for="html5-search-input" class="col-md-2 col-form-label"
                  >Images</label
                >
                <div >
                  <div class="col-md-10 m-2 ">
                    <input
                      type="file"
                      id="id_image"
                      name="Image"
                      class="form-control"
                      multiple
                    />
                  </div>
                  <div class="col-md-10 m-2">
                    <input
                      type="file"
                      id="id_image1"
                      name="Image"
                      class="form-control"
                      multiple
                    />
                  </div>
                  <div class="col-md-10 m-2">
                    <input
                      type="file"
                      id="id_image2"
                      name="Image"
                      class="form-control"
                      multiple
                    />
                  </div>
                </div>

              </div>
              <div id="image-box" class="image-container w-50 h-50" ></div>
              <button class="btn btn-outline-info" id="crop-btn" style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>
              <div id="image-box1" class="image-container w-50 h-50"></div>
              <button class="btn btn-outline-info" id="crop-btn1" style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>
              <div id="image-box2" class="image-container w-50 h-50"></div>
              <button class="btn btn-outline-info" id="crop-btn2" style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>
              <div class="mb-3 row">
                <button class="btn btn-primary d-grid w-100"id="confirm-btn" type="submit">
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>
<script>


function formValidate(){

const pName=document.getElementById("pnameid").value;
const price=document.getElementById("priceid").value;
const description=document.getElementById("descriptionid").value;
const quantity=document.getElementById("quantityid").value;
let Return = true

  if(pName===""){
    document.getElementById("errorname").innerHTML ="Please enter product name"
    Return=  false
}
if(price===""){
    document.getElementById("erorrprice").innerHTML ="Please enter product price"
    Return=  false
}
if(description===""){
    document.getElementById("errordescription").innerHTML ="Please enter product description"
    Return=  false
}
if(quantity===""){
    document.getElementById("errorquantity").innerHTML ="Please enter product quantity"
    Return=  false
}
return Return

}

function nullName(){
  document.getElementById("errorname").innerHTML =""

}

function nullPrice(){
  document.getElementById("erorrprice").innerHTML =""

}
function nullDescription(){
  document.getElementById("errordescription").innerHTML =""

}
function nullQuantity(){
  document.getElementById("errorquantity").innerHTML =""

}

function onlyNumberKey(evt) {
    // Only ASCII character in that range allowed
    var ASCIICode = evt.which ? evt.which : evt.keyCode;
    if (ASCIICode > 31 && (ASCIICode < 48 || ASCIICode > 57)) return false;
    return true;
  }


  //ImageCrop
	// image-box is the id of the div element that will store our cropping image preview
	const imagebox = document.getElementById('image-box')
        // crop-btn is the id of button that will trigger the event of change original file with cropped file.
	const crop_btn = document.getElementById('crop-btn')
	// id_image is the id of the input tag where we will upload the image
	const input = document.getElementById('id_image')

	// When user uploads the image this event will get triggered
	input.addEventListener('change', ()=>{
	  // Getting image file object from the input variable
	  const img_data = input.files[0]
	  // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
	  // The new object URL represents the specified File object or Blob object.
	  const url = URL.createObjectURL(img_data)
	  
	  // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
	  imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

	  // Storing that cropping view image in a variable
	  const image = document.getElementById('image')

	  // Displaying the image box
	  document.getElementById('image-box').style.display = 'block'
	  // Displaying the Crop buttton
	  document.getElementById('crop-btn').style.display = 'block'
	  // Hiding the Post button
	  document.getElementById('confirm-btn').style.display = 'none'

	  // Creating a croper object with the cropping view image
	  // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
	  // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
	  const cropper = new Cropper(image, {
	  autoCropArea: 1,
	  viewMode: 1,
	  scalable: false,
	  zoomable: false,
	  movable: false,
	  minCropBoxWidth: 200,
	  minCropBoxHeight: 200,
	  })

	  // When crop button is clicked this event will get triggered
	  crop_btn.addEventListener('click', ()=>{
	    // This method coverts the selected cropped image on the cropper canvas into a blob object
	    cropper.getCroppedCanvas().toBlob((blob)=>{
	      
	      // Gets the original image data
	      let fileInputElement = document.getElementById('id_image');
	      // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
	      let file = new File([blob], img_data.name,{type:"image/", lastModified:new Date().getTime()});
	      // Create a new container
	      let container = new DataTransfer();
	      // Add the cropped image file to the container
	      container.items.add(file);
	      // Replace the original image file with the new cropped image file
	      fileInputElement.files = container.files;

	      // Hide the cropper box
	      document.getElementById('image-box').style.display = 'none'
	      // Hide the crop button
	      document.getElementById('crop-btn').style.display = 'none'
	      // Display the Post button
	      document.getElementById('confirm-btn').style.display = 'block'

	      });
	    });
	});	



	// image-box is the id of the div element that will store our cropping image preview
	const imagebox1 = document.getElementById('image-box1')
        // crop-btn is the id of button that will trigger the event of change original file with cropped file.
	const crop_btn1 = document.getElementById('crop-btn1')
	// id_image is the id of the input tag where we will upload the image
	const input1 = document.getElementById('id_image1')

	// When user uploads the image this event will get triggered
	input1.addEventListener('change', ()=>{
	  // Getting image file object from the input variable
	  const img_data = input1.files[0]
	  // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
	  // The new object URL represents the specified File object or Blob object.
	  const url = URL.createObjectURL(img_data)
	  
	  // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
	  imagebox1.innerHTML = `<img src="${url}" id="image1" style="width:100%;">`

	  // Storing that cropping view image in a variable
	  const image1 = document.getElementById('image1')

	  // Displaying the image box
	  document.getElementById('image-box1').style.display = 'block'
	  // Displaying the Crop buttton
	  document.getElementById('crop-btn1').style.display = 'block'
	  // Hiding the Post button
	  document.getElementById('confirm-btn').style.display = 'none'

	  // Creating a croper object with the cropping view image
	  // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
	  // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
	  const cropper = new Cropper(image1, {
	  autoCropArea: 1,
	  viewMode: 1,
	  scalable: false,
	  zoomable: false,
	  movable: false,
	  minCropBoxWidth: 200,
	  minCropBoxHeight: 200,
	  })

	  // When crop button is clicked this event will get triggered
	  crop_btn1.addEventListener('click', ()=>{
	    // This method coverts the selected cropped image on the cropper canvas into a blob object
	    cropper.getCroppedCanvas().toBlob((blob)=>{
	      
	      // Gets the original image data
	      let fileInputElement = document.getElementById('id_image1');
	      // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
	      let file = new File([blob], img_data.name,{type:"image/", lastModified:new Date().getTime()});
	      // Create a new container
	      let container = new DataTransfer();
	      // Add the cropped image file to the container
	      container.items.add(file);
	      // Replace the original image file with the new cropped image file
	      fileInputElement.files = container.files;

	      // Hide the cropper box
	      document.getElementById('image-box1').style.display = 'none'
	      // Hide the crop button
	      document.getElementById('crop-btn1').style.display = 'none'
	      // Display the Post button
	      document.getElementById('confirm-btn').style.display = 'block'

	      });
	    });
	});	


	// image-box is the id of the div element that will store our cropping image preview
	const imagebox2 = document.getElementById('image-box2')
        // crop-btn is the id of button that will trigger the event of change original file with cropped file.
	const crop_btn2 = document.getElementById('crop-btn2')
	// id_image is the id of the input tag where we will upload the image
	const input2 = document.getElementById('id_image2')

	// When user uploads the image this event will get triggered
	input2.addEventListener('change', ()=>{
	  // Getting image file object from the input variable
	  const img_data = input2.files[0]
	  // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
	  // The new object URL represents the specified File object or Blob object.
	  const url = URL.createObjectURL(img_data)
	  
	  // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
	  imagebox2.innerHTML = `<img src="${url}" id="image2" style="width:100%;">`

	  // Storing that cropping view image in a variable
	  const image2 = document.getElementById('image2')

	  // Displaying the image box
	  document.getElementById('image-box2').style.display = 'block'
	  // Displaying the Crop buttton
	  document.getElementById('crop-btn2').style.display = 'block'
	  // Hiding the Post button
	  document.getElementById('confirm-btn').style.display = 'none'

	  // Creating a croper object with the cropping view image
	  // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
	  // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
	  const cropper = new Cropper(image2, {
	  autoCropArea: 1,
	  viewMode: 1,
	  scalable: false,
	  zoomable: false,
	  movable: false,
	  minCropBoxWidth: 200,
	  minCropBoxHeight: 200,
	  })

	  // When crop button is clicked this event will get triggered
	  crop_btn2.addEventListener('click', ()=>{
	    // This method coverts the selected cropped image on the cropper canvas into a blob object
	    cropper.getCroppedCanvas().toBlob((blob)=>{
	      
	      // Gets the original image data
	      let fileInputElement = document.getElementById('id_image2');
	      // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
	      let file = new File([blob], img_data.name,{type:"image/", lastModified:new Date().getTime()});
	      // Create a new container
	      let container = new DataTransfer();
	      // Add the cropped image file to the container
	      container.items.add(file);
	      // Replace the original image file with the new cropped image file
	      fileInputElement.files = container.files;

	      // Hide the cropper box
	      document.getElementById('image-box2').style.display = 'none'
	      // Hide the crop button
	      document.getElementById('crop-btn2').style.display = 'none'
	      // Display the Post button
	      document.getElementById('confirm-btn').style.display = 'block'

	      });
	    });
	});	

</script>
<%- include('layout/admin-footer.ejs') %>